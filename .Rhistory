colmeans(stocks)
colMeans(stocks)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
library(caret)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
str(stocks)
StocksModel<-glm(PositiveDec~.,family=binomial)
StocksModel<-glm(PositiveDec~.,data=stocksTrain,family=binomial)
summary(stocksModel)
summary(StocksModel)
predict(StocksModel,newdata=stocksTrain,type='response')
predLog1<-predict(StocksModel,newdata=stocksTrain,type='response')
table(stocksTrain$PositiveDec)
table(stocksTrain$PositiveDec,predLog1)
table(stocksTrain$PositiveDec,predLog1>.5)
tbl[1]+tbl[4]
tbl<-table(stocksTrain$PositiveDec,predLog1>.5)
tbl
tbl[1]+tbl[4]
tbl[1]+tbl[4]/nrow(tbl)
nrow(tbl)
nrow(stocksTrain)
sum(tbl)
tbl
990+787+2689+3640
(tbl[1]+tbl[4])/sum(tbl)
predTestLog1<-predict(StocksModel,newdata=stocksTest,type='response')
tbl<-table(stocksTrain$PositiveDec,predTestLog1>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predTestLog1<-predict(StocksModel,newdata=stocksTest,type='response')
tbl<-table(stocksTest$PositiveDec,predTestLog1>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
table(stocksTest$PositiveDec)
1897/(1577+1897)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
colMean(normTrain)
colMeans(normTrain)
colMeans(normTest)
summary(stocksTrain)
summary(stocksTest)
sd(stocksTest)
sd(stocksTest[,1])
sd(stocksTrain[,1])
summary(stocksTest)
summary(stocksTrain)
hist(stocksTrain[,1])
hist(stocksTest[,1])
par=mfrow(c(1,2))
par=mfrow(c(1,2))
par=mrfow(c(1,2))
?par
par(mfrow=c(1,2))
hist(stocksTrain[,1])
hist(stocksTest[,1])
k =3
set.seed(144)
KM = kmeans(normTrain, centers = k)
str(KM)
table(KM$cluster)
library(flexclust)
km.kcca = as.kcca(KM, normTrain)
cluster.train = predict(km.kcca)
cluster.test = predict(km.kcca, newdata=normTest)
table(cluster.test)
km.kcca = as.kcca(KM, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
table(clusterTest)
stocksTrain1<-subset(train,clusterTrain==1)
stocksTrain2<-subset(train,clusterTrain==2)
stocksTrain3<-subset(train,clusterTrain==3)
stocksTest1<-subset(train,clusterTest==1)
stocksTest2<-subset(train,clusterTest==2)
stocksTest3<-subset(train,clusterTest==3)
mean(stocksTrain1$PositiveDec)
str(stocksTrain1)
stocksTrain1<-subset(stocksTrain,clusterTrain==1)
stocksTrain2<-subset(stocksTrain,clusterTrain==2)
stocksTrain3<-subset(stocksTrain,clusterTrain==3)
stocksTest1<-subset(stocksTest,clusterTest==1)
stocksTest2<-subset(stocksTest,clusterTest==2)
stocksTest3<-subset(stocksTest,clusterTest==3)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain1$PositiveDec)
mean(stocksTrain2$PositiveDec)
mean(stocksTrain3$PositiveDec)
StocksModel1<-glm(PositiveDec~.,family=binomial,data=stocksTrain1)
StocksModel2<-glm(PositiveDec~.,family=binomial,data=stocksTrain2)
StocksModel3<-glm(PositiveDec~.,family=binomial,data=stocksTrain3)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
StocksModel3$coefficients
StocksModel1\(coefficients
StocksModel1$coefficients
StocksModel2$coefficients
StocksModel3$coefficients
rbind(stocksModel1$coefficients>0,stocksModel2$coefficients>0,stocksModel3$coefficients>0)
rbind(StocksModel1$coefficients>0,StocksModel2$coefficients>0,StocksModel3$coefficients>0)
predict(StocksModel1,newdata=stocksTest1,type='response')
PredictTest1<-predict(StocksModel1,newdata=stocksTest1,type='response')
PredictTest2<-predict(StocksModel2,newdata=stocksTest2,type='response')
PredictTest3<-predict(StocksModel3,newdata=stocksTest3,type='response')
tbl<-table(stocksTest1$PositiveDec,PredictTest1>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
tbl<-table(stocksTest2$PositiveDec,PredictTest2>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
tbl<-table(stocksTest3$PositiveDec,PredictTest3>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
stocksTest
tbl<-table(stocksTest$PositiveDec,AllPredictions>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
AllOutcomes
AllPredictions
tbl<-table(AllOutcomes,AllPredictions>.5)
tbl
(tbl[1]+tbl[4])/sum(tbl)
rm(list=ls())
train = read.csv("./kaggle/train2016.csv")
test = read.csv("./kaggle/test2016.csv")
boxplot(train$Income~train$Party)
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
str(train)
boxplot(train$age~train$Party)
par(mfrow=c(1,1))
boxplot(train$age~train$Party)
table(train$Gender,train$Party)
table(train$Gender,train$Party,is.na(train$age))
library(rpart)
library(rpart.plot)
simpleCartMod1<-rpart(Party ~ . -USER_ID -YOB, data=train, method="class"))
simpleCartMod1<-rpart(Party ~ . -USER_ID -YOB, data=train, method="class")
prp(simpleCartMod1)
simpleCartMod1
predCart1<-predict(simpleCartMod1,newdata=test,type='response')
predCart1<-predict(simpleCartMod1,newdata=test,type='class')
predCart1
predCart1<-predict(simpleCartMod1,newdata=train,type='class')
predCart1<-predict(simpleCartMod1,newdata=train,type='class')
tbl<-table(train$Party,predCart1>.500)
tbl
(tbl[1]+tbl[4])/sum(tbl)
tbl<-table(train$Party,predCart1)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predCart1
PredTrainLabels = as.factor(ifelse(predCartTrain1<threshold, "Democrat", "Republican"))
predCartTrain1<-predict(simpleCartMod1,newdata=train,type='class')
tbl<-table(train$Party,predCartTrain1)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predCart1<-predict(simpleCartMod1,newdata=test,type='class')
threshold = 0.5
PredTrainLabels = as.factor(ifelse(predCartTrain1<threshold, "Democrat", "Republican"))
PredTestLabels = as.factor(ifelse(predCart1<threshold, "Democrat", "Republican"))
predCart1
predCartTrain1[,2]
predCartTrain1[,1]
str(predCartTrain1)
table(predCartTrain1)
MySubmission = data.frame(USER_ID = test$USER_ID, Predictions = predCart1)
MySubmission
head(MySubmission)
SimpleMod = glm(Party ~ . -USER_ID, data=train, family=binomial)
summary(SimpleMod)
# And then make predictions on the test set:
PredTrain = predict(SimpleMod,newdata=train, type="response")
PredTest = predict(SimpleMod, newdata=test, type="response")
threshold = 0.5
PredTrainLabels = as.factor(ifelse(PredTrain<threshold, "Democrat", "Republican"))
PredTestLabels = as.factor(ifelse(PredTest<threshold, "Democrat", "Republican"))
tbl<-table(train$Party,PredTrain>.530)
tbl
(tbl[1]+tbl[4])/sum(tbl)
# However, you can submit the file on Kaggle to see how well the model performs. You can make up to 5 submissions per day, so don't hesitate to just upload a solution to see how you did.
# Let's prepare a submission file for Kaggle (for more about this, see the "Evaluation" page on the competition site):
MySubmission = data.frame(USER_ID = test$USER_ID, Predictions = PredTestLabels)
write.csv(MySubmission, "./kaggle/SubmissionSimpleLog.csv", row.names=FALSE)
simpleCartMod1<-rpart(Party ~ . -USER_ID -YOB, data=train, method="class")
prp(simpleCartMod1)
predCartTrain1<-predict(simpleCartMod1,newdata=train,type='class')
tbl<-table(train$Party,predCartTrain1)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predCart1<-predict(simpleCartMod1,newdata=test,type='class')
MySubmissionCart = data.frame(USER_ID = test$USER_ID, Predictions = predCart1)
write.csv(MySubmissionCart, "./kaggle/SubmissionSimpleCart.csv", row.names=FALSE)
summary(SimpleMod)
objects(SimpleMod)
SimpleMod$boundary
SimpleMod$control
SimpleMod$data
objects(SimpleMod)
SimpleMod$effects
objects(SimpleMod)
SimpleMod$deviance
SimpleMod$iter
SimpleMod$offset
SimpleMod$qr
objects(SimpleMod)
SimpleMod$xl
(SimpleMod)
anova(SimpleMod)
coef(summary(SimpleMod))[,"Pr(>|z|)"]
summary(SimpleMod)
SimpleMod = glm(Party ~ . -USER_ID -YOB, data=train, family=binomial)
summary(SimpleMod)
coef(summary(SimpleMod))[,"Pr(>|z|)"]
summary(SimpleMod)
coef(summary(SimpleMod))[,"z value"]
summary(SimpleMod)
str(train)
grep("",train$YOB)
train[grep("",train$YOB),]
nrow(train[grep("",train$YOB),])
nrow(train)
nrow(train[train$YOB=="",])
blank<-function(x){if(x==""){print(x)}}
blank(train$YOB)
lapply(x,function(x){if(x=="",x<-"blank",)})
lapply(train$YOB,function(x){if(x=="",x<-"blank")})
lapply(train$YOB,function(x){if(x==""){x<-"blank"})
lapply(train$YOB,function(x),{if(x==""){x<-"blank"})
train$YOB[train$YOB==""]
train$Gender[train$Gender==""]
length(train$Gender[train$Gender==""])
train[train$Gender=="",c(1:5)])
train[train$Gender=="",c(1:5)]
train[train$Gender=="",c(1:5)]
train$Gender[train$Gender==""]<-'blank'
factor(train$Gender)
train$Gender
factor(train$Gender,levels=(c"Female","Male","blank"))
factor(train$Gender,levels=(c("Female","Male","blank"))
)
train$Gender<-factor(train$Gender,levels=(c("Female","Male","blank")))
train$Gender
train$Gender[train$Gender==""]<-'blank'
train$Gender
table(train$Gender)
table(is.na(train$Gender))
train[train$Gender=="",]
train = read.csv("./kaggle/train2016.csv")
train$Gender[train$Gender==""]
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=F)
str(train)
train$Gender[train$Gender == ''|' ']
train$Gender[which(train$Gender == ''|' ')]
train$Gender[which(train$Gender == '',train$Gender == ' ')]
train$Q101163[which(train$Q101163 == '',train$Q101163 == ' ')]
train$Q101163[which(train$Q101163 == ' ')]
train$Q101163[train$Q101163 == " "]
train$Q101163[train$Q101163 == ""]
train,[train$Q101163 == ""]
train[train$Q101163 == "",]
train[train$Q101163 == "",1:5]
train[train$Q101163 == "","Q101163"]
train[train$Q101163 == "","Q101163","Gender"]
train[train$Q101163 == "",c("Q101163","Gender")]
str(train)
table(train$Q101163)
train[grep(" ",train$Q101163,ignore.case=T),]
train[grep(" +",train$Q101163,ignore.case=T),]
train[grep(" *",train$Q101163,ignore.case=T),]
train[grep("",train$Q101163,ignore.case=T),]
train[grep(" ",train$Q101163,ignore.case=T),]
change_to_blank<- function(x){
x[x == '']<-'blank'
}
lapply(train,change_to_blank
lapply(train,change_to_blank)
test<-lapply(train,change_to_blank)
str(test)
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T)
test = read.csv("./kaggle/test2016.csv")
change_to_blank<- function(x){
x[x == '']<-'blank'
}
tst<-lapply(train,change_to_blank)
tst[]<-lapply(train,change_to_blank)
train[train=='']
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T,na.strings = c("NA", '',' '))
str(train)
str(train)
test = read.csv("./kaggle/test2016.csv",stringsAsFactors=T,na.strings = c("NA", '',' '))
str(test)
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
SimpleMod = glm(Party ~ . -USER_ID -YOB, data=train, family=binomial)
summary(SimpleMod)
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T)
#convert YOB to date
library(lubridate)
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
SimpleMod = glm(Party ~ . -USER_ID -YOB, data=train, family=binomial)
summary(SimpleMod)
PredTrain = predict(SimpleMod,newdata=train, type="response")
PredTest = predict(SimpleMod, newdata=test, type="response")
threshold = 0.5
PredTrainLabels = as.factor(ifelse(PredTrain<threshold, "Democrat", "Republican"))
PredTestLabels = as.factor(ifelse(PredTest<threshold, "Democrat", "Republican"))
tbl<-table(train$Party,PredTrain>.530)
tbl
(tbl[1]+tbl[4])/sum(tbl)
MySubmission = data.frame(USER_ID = test$USER_ID, Predictions = PredTestLabels)
write.csv(MySubmission, "./kaggle/SubmissionSimpleLog.csv", row.names=FALSE)
simpleCartMod1<-rpart(Party ~ . -USER_ID -YOB, data=train, method="class")
prp(simpleCartMod1)
simpleCartMod1
predCartTrain1<-predict(simpleCartMod1,newdata=train,type='class')
tbl<-table(train$Party,predCartTrain1)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predCart1<-predict(simpleCartMod1,newdata=test,type='class')
MySubmissionCart = data.frame(USER_ID = test$USER_ID, Predictions = predCart1)
write.csv(MySubmissionCart, "./kaggle/SubmissionSimpleCart.csv", row.names=FALSE)
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T)#,na.strings = c("NA", '',' '))
str(train)
test = read.csv("./kaggle/test2016.csv",stringsAsFactors=T)#,na.strings = c("NA", '',' '))
str(test)
lapply(train$Gender,function(x) print(factor(x))
lapply(train$Gender,function(x) print(factor(x)))
lapply(train,function(x) print(factor(x)))
lapply(train,function(x) facX<-(factor(x)))
facX
lapply(train,function(x) (levels(x)))
37/24
x<-lapply(train,function(x) factor(levels(x)))
x
x<-lapply(train,function(x) (levels(x)))
x
change_to_blank<-function(x) {
x<-factor(paste(levels(x),'blank')}
change_to_blank<-function(x) {
x<-factor(paste(levels(x),'blank'))
}
change_to_blank(train$Gender)
factor(train$Gender)
tst<-change_to_blank(train$Gender)
tst
change_to_blank<-function(x) {
x<-factor(paste(levels(x),'blank'))
x[x=='']<-'blank'
}
tst<-change_to_blank(train$Gender)
tst
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=F)#,na.strings = c("NA", '',' '))
tst<-change_to_blank(train$Gender)
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=F)#,na.strings = c("NA", '',' '))
str(train)
train[train=='',]
lapply(train,train[train=='',]<-'blank')
train[train=='']<-'blank'
str(train)
table(train$Gender)
str(train)
head(train[,2:])
head(train[,2:108])
train[,2:108]<-lapply(train[,2:108],factor)
str(train)
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=F)#,na.strings = c("NA", '',' '))
test = read.csv("./kaggle/test2016.csv",stringsAsFactors=F)#,na.strings = c("NA", '',' '))
#Explore and clean
#convert blanks "" into "blank"
train[train=='']<-'blank'
test[test=='']<-'blank'
#convert to factor
train[,3:108]<-lapply(train[,3:108],factor)
str(train)
test[,3:108]<-lapply(test[,3:108],factor)
library(lubridate)
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
SimpleMod = glm(Party ~ . -USER_ID -YOB, data=train, family=binomial)
summary(SimpleMod)
PredTrain = predict(SimpleMod,newdata=train, type="response")
PredTest = predict(SimpleMod, newdata=test, type="response")
threshold = 0.5
PredTrainLabels = as.factor(ifelse(PredTrain<threshold, "Democrat", "Republican"))
PredTestLabels = as.factor(ifelse(PredTest<threshold, "Democrat", "Republican"))
tbl<-table(train$Party,PredTrain>.530)
tbl
(tbl[1]+tbl[4])/sum(tbl)
simpleCartMod1<-rpart(Party ~ . -USER_ID -YOB, data=train, method="class")
prp(simpleCartMod1)
predCartTrain1<-predict(simpleCartMod1,newdata=train,type='class')
tbl<-table(train$Party,predCartTrain1)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predCart1<-predict(simpleCartMod1,newdata=test,type='class')
MySubmissionCart = data.frame(USER_ID = test$USER_ID, Predictions = predCart1)
write.csv(MySubmissionCart, "./kaggle/SubmissionSimpleCart.csv", row.names=FALSE)
complete.cases(train)
length(complete.cases(train))
nrow(train))
nrow(train)
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T)
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
length(complete.cases(train))
length(complete.cases(train))[==T]
length(complete.cases(train)[==T])
length(complete.cases(train[==T]))
(complete.cases(train[==T]))
(complete.cases(train))
table(complete.cases(train))
train<-train[complete.cases(train)),]
train<-train[complete.cases(train),]
train
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T)#,na.strings = c("NA", '',' '))
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
train[complete.cases(train)==T,]
complete.cases(train)==T
temp<-train[complete.cases(train)==T,1:5]
head(temp)
train[1,]
train = read.csv("./kaggle/train2016.csv",stringsAsFactors=T,na.strings = c("NA", '',' '))
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
nrow(train[complete.cases(train)==T,])
boxplot(train$age)
train<-train[complete.cases(train)==T,]  # read.csv na.strings = '' complete cases = 697
train$YOB<-year(as.POSIXct(paste(train$YOB,"-01","-01",sep=""),format='%Y'))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
#create age variable
train$age<-year(today())-train$YOB #'today()' is a lubrdiate function
SimpleMod = glm(Party ~ . -USER_ID -YOB, data=train, family=binomial)
summary(SimpleMod)
PredTrain = predict(SimpleMod,newdata=train, type="response")
PredTest = predict(SimpleMod, newdata=test, type="response")
threshold = 0.5
PredTrainLabels = as.factor(ifelse(PredTrain<threshold, "Democrat", "Republican"))
PredTestLabels = as.factor(ifelse(PredTest<threshold, "Democrat", "Republican"))
tbl<-table(train$Party,PredTrain>.530)
tbl
(tbl[1]+tbl[4])/sum(tbl)
PredTest = predict(SimpleMod, newdata=test, type="response")
test = read.csv("./kaggle/test2016.csv",stringsAsFactors=T)#,na.strings = c("NA", '',' '))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
boxplot(test$age)
PredTest = predict(SimpleMod, newdata=test, type="response")
test = read.csv("./kaggle/test2016.csv",stringsAsFactors=T,na.strings = c("NA", '',' '))
test$YOB<-year(as.POSIXct(paste(test$YOB,"-01","-01",sep=""),format='%Y'))
test$age<-year(today())-test$YOB #'today()' is a lubrdiate function
boxplot(test$age)
PredTest = predict(SimpleMod, newdata=test, type="response")
threshold = 0.5
PredTrainLabels = as.factor(ifelse(PredTrain<threshold, "Democrat", "Republican"))
PredTestLabels = as.factor(ifelse(PredTest<threshold, "Democrat", "Republican"))
tbl<-table(train$Party,PredTrain>.530)
tbl
(tbl[1]+tbl[4])/sum(tbl)
tbl<-table(train$Party,PredTrain>.50)
tbl
(tbl[1]+tbl[4])/sum(tbl)
MySubmission = data.frame(USER_ID = test$USER_ID, Predictions = PredTestLabels)
write.csv(MySubmission, "./kaggle/SubmissionSimpleLog.csv", row.names=FALSE)
simpleCartMod1<-rpart(Party ~ . -USER_ID -YOB, data=train, method="class")
prp(simpleCartMod1)
predCartTrain1<-predict(simpleCartMod1,newdata=train,type='class')
tbl<-table(train$Party,predCartTrain1)
tbl
(tbl[1]+tbl[4])/sum(tbl)
predCart1<-predict(simpleCartMod1,newdata=test,type='class')
MySubmissionCart = data.frame(USER_ID = test$USER_ID, Predictions = predCart1)
write.csv(MySubmissionCart, "./kaggle/SubmissionSimpleCart.csv", row.names=FALSE)
simpleCartMod1
